{
  "version": 3,
  "sources": ["../src/use-shiny.ts", "../src/utils.ts", "../src/ImageOutput.tsx"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { type EventPriority } from \"rstudio-shiny/srcts/types/src/inputPolicies\";\nimport { type ShinyClass } from \"rstudio-shiny/srcts/types/src/shiny\";\nimport { debounce } from \"./utils\";\n\n/**\n * A React hook for managing a Shiny input value.\n *\n * This hook initializes a state variable with `defaultValue` and returns the\n * current value and a function to update it, similar to `React.useState`.\n *\n * When the component mounts, it waits for Shiny to initialize. Once Shiny is\n * initialized, this hook registers the input with the Shiny React registry and\n * uses debounced updates to send values to the Shiny server via\n * `window.Shiny.setInputValue()`.\n *\n * The hook supports debouncing to optimize performance by batching rapid\n * updates, and allows setting priority levels for input events.\n *\n * Note: This hook only sends data *to* Shiny. It does not automatically update\n * the React state if the input is changed on the server-side (e.g., using\n * `updateTextInput()`). For two-way binding, a custom Shiny input binding would\n * be required.\n *\n * @param id The ID that will be used for the Shiny input (`input$<id>`).\n * @param defaultValue The initial value for the input.\n * @param options Optional configuration object.\n * @param options.debounceMs Debounce delay in milliseconds for input updates\n * (default: 100).\n * @param options.priority Priority level for the input event (from Shiny's\n * EventPriority enum).\n * @returns A tuple containing the current value and a function to set the\n * value: `[value, setValue]`.\n */\nexport function useShinyInput<T>(\n  id: string,\n  defaultValue: T,\n  {\n    debounceMs = 100,\n    priority,\n  }: {\n    debounceMs?: number;\n    priority?: EventPriority;\n  } = {}\n): [T, (value: T) => void] {\n  // NOTE: It's a little odd that debounceMs and priority passed this way; the\n  // debounceMs is associated with the specific input name, and in Shiny's API,\n  // priority is associated with each individual call to setInputValue(). But\n  // here they're both associated with the input name, and also if there are\n  // multiple calls to useShinyInput(\"foo\"), then the priority will be from the\n  // first call. This all should be straightened out in the future.\n\n  const [value, setValue] = useState<T>(defaultValue);\n  const shinyInitialized = useShinyInitialized();\n\n  useEffect(() => {\n    if (!shinyInitialized) {\n      return;\n    }\n    // Don't register and set value more than once.\n    if (id in window.Shiny.reactRegistry.inputs) {\n      return;\n    }\n\n    window.Shiny.reactRegistry.registerInput(id, setValue, {\n      debounceMs,\n      priority,\n    });\n    window.Shiny.reactRegistry.setInputValue(id, value);\n    // TODO: Cleanup? in case id changes or something like that.\n  }, [id, shinyInitialized, debounceMs, priority, value]);\n\n  const setValueWrapped = useCallback(\n    (value: T) => {\n      if (!shinyInitialized) {\n        return;\n      }\n\n      window.Shiny.reactRegistry.setInputValue(id, value);\n    },\n    [shinyInitialized, id]\n  );\n\n  // useEffect(() => {\n  //   if (!shinyInitialized) {\n  //     return;\n  //   }\n\n  //   window.Shiny.setInputValue!(inputId, value);\n  // }, [shinyInitialized, inputId, value]);\n\n  return [value, setValueWrapped];\n}\n\n/**\n * Hook to receive and subscribe to Shiny output values from the server. Creates\n * a hidden DOM element and registers a custom Shiny output binding to receive\n * reactive data updates for the specified outputId.\n *\n * @param outputId The ID of the Shiny output to subscribe to.\n * @param defaultValue Optional default value to use before the first server\n * update.\n * @returns A tuple containing [value, recalculating] where:\n *   - value: The current value of the Shiny output\n *   - recalculating: Boolean indicating if the server is currently\n *     recalculating this output\n */\nexport function useShinyOutput<T>(\n  outputId: string,\n  defaultValue: T | undefined = undefined\n): [T | undefined, boolean] {\n  const [value, setValue] = useState<T | undefined>(defaultValue);\n  const [recalculating, setRecalculating] = useState<boolean>(false);\n  const shinyInitialized = useShinyInitialized();\n\n  useEffect(() => {\n    if (!shinyInitialized) {\n      return;\n    }\n    window.Shiny.reactRegistry.registerOutput(\n      outputId,\n      setValue,\n      setRecalculating\n    );\n  }, [outputId, shinyInitialized]);\n\n  return [value, recalculating];\n}\n\n// TODO: Implement useShinyOutputValue and useShinyOutputRecalculating\n// TODO: Also get error value?\n\nexport class ReactOutputBinding extends window.Shiny.OutputBinding {\n  override find(scope: HTMLElement | JQuery<HTMLElement>): JQuery<HTMLElement> {\n    return $(scope).find(\".react-shiny-output\");\n  }\n\n  override renderValue(el: HTMLElement, data: any): void {\n    window.Shiny.reactRegistry.outputs[el.id].setValueFns.forEach((fn) =>\n      fn(data)\n    );\n  }\n\n  override renderError(el: HTMLElement, err: ErrorsMessageValue): void {\n    console.log(`Error for ${el.id}: ${err}`);\n  }\n\n  override showProgress(el: HTMLElement, show: boolean): void {\n    // console.log(`Progress for ${el.id}: ${show}`);\n    window.Shiny.reactRegistry.outputs[el.id].setRecalculatingFns.forEach(\n      (fn) => fn(show)\n    );\n  }\n}\n\nwindow.Shiny.outputBindings.register(\n  new ReactOutputBinding(),\n  \"shiny.reactOutput\"\n);\n\n// Copied from shinyapp.d.ts\ntype ErrorsMessageValue = {\n  message: string;\n  call: string[];\n  type?: string[];\n};\n\ntype InputMap = {\n  [key: string]: {\n    // Input ID\n    id: string;\n    setValueFns: Array<(value: any) => void>;\n    // Possibly debounce Shiny input value setter\n    shinySetInputValueDebounced: (\n      value: any,\n      opts?: { priority?: EventPriority }\n    ) => void;\n  };\n};\n\ntype OutputMap = {\n  [key: string]: {\n    // Output ID\n    id: string;\n    setValueFns: Array<(value: any) => void>;\n    setRecalculatingFns: Array<(value: boolean) => void>;\n  };\n};\n\n// TODO: Use weakmap?\nclass ShinyReactRegistry {\n  inputs: InputMap = {};\n  outputs: OutputMap = {};\n  private bindAllScheduled = false;\n\n  constructor() {\n    window.Shiny.addCustomMessageHandler(\"shinyReactSetInputs\", (msg: any) => {\n      for (const [inputId, value] of Object.entries(msg)) {\n        if (this.inputs[inputId]) {\n          // TODO: Don't use debounced version\n          this.setInputValue(inputId, value);\n        }\n      }\n    });\n  }\n\n  registerInput(\n    inputId: string,\n    setValueFn: (value: any) => void,\n    opts: { priority?: EventPriority; debounceMs?: number } = {}\n  ) {\n    const { debounceMs = 100 } = opts;\n    const setInputValueOpts: { priority?: EventPriority } = {};\n    if (opts.priority) {\n      setInputValueOpts.priority = opts.priority;\n    }\n\n    if (!this.inputs[inputId]) {\n      this.inputs[inputId] = {\n        id: inputId,\n        setValueFns: [],\n        shinySetInputValueDebounced: debounce((value: any) => {\n          window.Shiny.setInputValue!(inputId, value, setInputValueOpts);\n        }, debounceMs),\n      };\n    }\n    this.inputs[inputId].setValueFns.push(setValueFn);\n  }\n\n  registerOutput(\n    outputId: string,\n    setValue: (value: any) => void,\n    setRecalculating: (value: boolean) => void\n  ) {\n    if (!this.outputs[outputId]) {\n      // Need to create a dummy div element with the ID, so that we have\n      // something to bind to.\n      const div = document.createElement(\"div\");\n      div.className = \"react-shiny-output\";\n      div.id = outputId;\n      div.textContent = `This is the output div for ${outputId}`;\n      // Will display: none make the output not work?\n      div.style.visibility = \"hidden\";\n      document.body.appendChild(div);\n\n      this.outputs[outputId] = {\n        id: outputId,\n        setValueFns: [],\n        setRecalculatingFns: [],\n      };\n\n      this.scheduleBindAll();\n    }\n\n    // Do we need to dedupe?\n    this.outputs[outputId].setValueFns.push(setValue);\n    this.outputs[outputId].setRecalculatingFns.push(setRecalculating);\n  }\n\n  /**\n   * Schedules a Shiny binding operation to run after DOM updates are complete.\n   *\n   * Note: I'm not sure if this is 100% reliable. I believe we need to avoid\n   * overlapping calls to bindAll(), and am not sure if requestAnimationFrame()\n   * will provide perfect reliability for this.\n   */\n  private scheduleBindAll() {\n    if (this.bindAllScheduled) {\n      return;\n    }\n\n    this.bindAllScheduled = true;\n\n    // Use requestAnimationFrame to ensure DOM updates are complete\n    requestAnimationFrame(() => {\n      window.Shiny.unbindAll?.(document.body);\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      window.Shiny.bindAll?.(document.body);\n      this.bindAllScheduled = false;\n    });\n  }\n\n  hasInput(inputId: string) {\n    return this.inputs[inputId] !== undefined;\n  }\n\n  setInputValue(\n    inputId: string,\n    value: any,\n    opts?: { priority?: EventPriority }\n  ) {\n    if (!this.inputs[inputId]) {\n      console.error(`Input ${inputId} not found`);\n      return;\n    }\n    this.inputs[inputId].shinySetInputValueDebounced(value, opts);\n    this.inputs[inputId].setValueFns.forEach((fn) => fn(value));\n  }\n\n  hasOutput(outputId: string) {\n    return this.outputs[outputId] !== undefined;\n  }\n}\n\ndeclare global {\n  interface Window {\n    Shiny: ShinyClass & {\n      reactRegistry: ShinyReactRegistry;\n    };\n  }\n}\n\nwindow.Shiny.reactRegistry = new ShinyReactRegistry();\n\n/**\n * A React hook that tracks whether Shiny has been initialized.\n *\n * @returns A boolean indicating whether Shiny has been initialized.\n */\nexport function useShinyInitialized(): boolean {\n  const [shinyInitialized, setShinyInitialized] = useState<boolean>(false);\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    window.Shiny.initializedPromise.then(() => {\n      setShinyInitialized(true);\n    });\n  }, []);\n\n  return shinyInitialized;\n}\n", "/**\n * Creates a debounced function that delays invoking func until after wait milliseconds have elapsed\n * since the last time the debounced function was invoked.\n *\n * @param func The function to debounce\n * @param wait The number of milliseconds to delay\n * @returns A debounced version of the function\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n\n  return function (...args: Parameters<T>) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n\n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(later, wait);\n  };\n}\n", "import React, { useRef, useEffect, useState } from \"react\";\nimport { useShinyInput, useShinyOutput } from \"./use-shiny\";\nimport { debounce } from \"./utils\";\n\nexport type ImageData = {\n  src: string;\n  width: number;\n  height: number;\n  coordmap: {\n    panels: {\n      panel: number;\n      row: number;\n      col: number;\n      domain: {\n        left: number;\n        right: number;\n        bottom: number;\n        top: number;\n      };\n      range: {\n        left: number;\n        right: number;\n        bottom: number;\n        top: number;\n      };\n      log: {\n        x: string | null;\n        y: string | null;\n      };\n      mapping: {\n        x: string | null;\n        y: string | null;\n      };\n    }[];\n    dims: {\n      width: number;\n      height: number;\n    };\n  };\n};\n\nexport function ImageOutput({\n  id,\n  className,\n}: {\n  id: string;\n  className?: string;\n}) {\n  const [imgWidth, setImgWidth] = useShinyInput<number | null>(\n    \".clientdata_output_\" + id + \"_width\",\n    null\n  );\n  const [imgHeight, setImgHeight] = useShinyInput<number | null>(\n    \".clientdata_output_\" + id + \"_height\",\n    null\n  );\n\n  // Track if the image is hidden\n  const [imgHidden] = useShinyInput<boolean>(\n    \".clientdata_output_\" + id + \"_hidden\",\n    false\n  );\n  const [imgData, imgRecalculating] = useShinyOutput<ImageData>(id, undefined);\n\n  // Create a reference to the img element to access its properties\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  // Track when the image data changes\n  const [imageVersion, setImageVersion] = useState(0);\n\n  // Update the version when imgData changes\n  useEffect(() => {\n    if (imgData) {\n      setImageVersion((prev) => prev + 1);\n    }\n  }, [imgData]);\n\n  // Handle image load and dimension changes\n  const handleImageLoad = () => {\n    if (imgRef.current) {\n      const width = imgRef.current.clientWidth;\n      const height = imgRef.current.clientHeight;\n      console.log(\"Image loaded - Width:\", width, \"Height:\", height);\n      setImgWidth(width);\n      setImgHeight(height);\n    }\n  };\n\n  // Set up a mutation observer to detect image dimension changes\n  useEffect(() => {\n    console.log(\"Image dimensions changed\");\n    const img = imgRef.current;\n    if (!img) return;\n\n    // Set initial dimensions when the image first loads\n    img.addEventListener(\"load\", handleImageLoad);\n\n    // Create a debounced version of handleImageLoad with 200ms delay\n    const debouncedHandleResize = debounce(() => {\n      if (img && img.complete) {\n        handleImageLoad();\n      }\n    }, 400);\n\n    // Create a ResizeObserver to detect size changes\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (const entry of entries) {\n        if (entry.target === img) {\n          debouncedHandleResize();\n        }\n      }\n    });\n\n    resizeObserver.observe(img);\n\n    return () => {\n      img.removeEventListener(\"load\", handleImageLoad);\n      resizeObserver.disconnect();\n    };\n  }, [imgRef, imageVersion, setImgWidth, setImgHeight]);\n\n  return (\n    <img\n      ref={imgRef}\n      src={imgData?.src}\n      alt=\"\"\n      className={className}\n      style={{\n        width: \"100%\",\n        height: \"300px\",\n        display: imgHidden ? \"none\" : \"block\",\n        opacity: imgRecalculating ? 0.4 : 1,\n      }}\n      onLoad={handleImageLoad}\n    />\n  );\n}\n"],
  "mappings": "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",
  "names": ["value", "useEffect", "useState", "useState", "useEffect"]
}
